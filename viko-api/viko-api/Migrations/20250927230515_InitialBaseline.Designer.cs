// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using viko_api.Models;

#nullable disable

namespace viko_api.Migrations
{
    [DbContext(typeof(VikoDbContext))]
    [Migration("20250927230515_InitialBaseline")]
    partial class InitialBaseline
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("viko_api.Models.Entities.Administrator", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("Entity_Id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("User_Id");

                    b.HasKey("Id")
                        .HasName("PK__Administ__3214EC073EC03841");

                    b.HasIndex("EntityId");

                    b.HasIndex("UserId");

                    b.ToTable("Administrators");
                });

            modelBuilder.Entity("viko_api.Models.Entities.Entity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Image")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Languages")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__Entities__3214EC070ADBE488");

                    b.ToTable("Entities");
                });

            modelBuilder.Entity("viko_api.Models.Entities.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("Entity_Id");

                    b.Property<long>("EventStatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("Event_Status_Id");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Finish_Date");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("RegistrationDeadline")
                        .HasColumnType("datetime")
                        .HasColumnName("Registration_Deadline");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Start_Date");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint")
                        .HasColumnName("Teacher_Id");

                    b.HasKey("Id")
                        .HasName("PK__Events__3214EC0796865580");

                    b.HasIndex("EntityId");

                    b.HasIndex("EventStatusId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("viko_api.Models.Entities.EventRegistration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("EventId")
                        .HasColumnType("bigint")
                        .HasColumnName("Event_Id");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint")
                        .HasColumnName("Student_Id");

                    b.HasKey("Id")
                        .HasName("PK__EventReg__3214EC07A46E7A77");

                    b.HasIndex("EventId");

                    b.HasIndex("StudentId");

                    b.ToTable("EventRegistrations");
                });

            modelBuilder.Entity("viko_api.Models.Entities.EventStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__EventSta__3214EC07E115BBAA");

                    b.ToTable("EventStatus", (string)null);
                });

            modelBuilder.Entity("viko_api.Models.Entities.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("Entity_Id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("User_Id");

                    b.HasKey("Id")
                        .HasName("PK__Students__3214EC07E1286ECC");

                    b.HasIndex("EntityId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("viko_api.Models.Entities.Teacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("Entity_Id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("User_Id");

                    b.HasKey("Id")
                        .HasName("PK__Teacher__3214EC0794A11128");

                    b.HasIndex("EntityId");

                    b.HasIndex("UserId");

                    b.ToTable("Teacher", (string)null);
                });

            modelBuilder.Entity("viko_api.Models.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateOnly>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("Entity_Id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Phone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Users__3214EC0772F42D82");

                    b.HasIndex("EntityId");

                    b.HasIndex(new[] { "Username" }, "UQ__Users__536C85E4D82E5D9E")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D1053450251125")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("viko_api.Models.Entities.Administrator", b =>
                {
                    b.HasOne("viko_api.Models.Entities.Entity", "Entity")
                        .WithMany("Administrators")
                        .HasForeignKey("EntityId")
                        .IsRequired()
                        .HasConstraintName("FK_Admin_Entity");

                    b.HasOne("viko_api.Models.Entities.User", "User")
                        .WithMany("Administrators")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Admin_User");

                    b.Navigation("Entity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("viko_api.Models.Entities.Event", b =>
                {
                    b.HasOne("viko_api.Models.Entities.Entity", "Entity")
                        .WithMany("Events")
                        .HasForeignKey("EntityId")
                        .IsRequired()
                        .HasConstraintName("FK_Event_Entity");

                    b.HasOne("viko_api.Models.Entities.EventStatus", "EventStatus")
                        .WithMany("Events")
                        .HasForeignKey("EventStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Event_Status");

                    b.HasOne("viko_api.Models.Entities.Teacher", "Teacher")
                        .WithMany("Events")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK_Event_Teacher");

                    b.Navigation("Entity");

                    b.Navigation("EventStatus");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("viko_api.Models.Entities.EventRegistration", b =>
                {
                    b.HasOne("viko_api.Models.Entities.Event", "Event")
                        .WithMany("EventRegistrations")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_Registration_Event");

                    b.HasOne("viko_api.Models.Entities.Student", "Student")
                        .WithMany("EventRegistrations")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_Registration_Student");

                    b.Navigation("Event");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("viko_api.Models.Entities.Student", b =>
                {
                    b.HasOne("viko_api.Models.Entities.Entity", "Entity")
                        .WithMany("Students")
                        .HasForeignKey("EntityId")
                        .IsRequired()
                        .HasConstraintName("FK_Student_Entity");

                    b.HasOne("viko_api.Models.Entities.User", "User")
                        .WithMany("Students")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Student_User");

                    b.Navigation("Entity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("viko_api.Models.Entities.Teacher", b =>
                {
                    b.HasOne("viko_api.Models.Entities.Entity", "Entity")
                        .WithMany("Teachers")
                        .HasForeignKey("EntityId")
                        .IsRequired()
                        .HasConstraintName("FK_Teacher_Entity");

                    b.HasOne("viko_api.Models.Entities.User", "User")
                        .WithMany("Teachers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Teacher_User");

                    b.Navigation("Entity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("viko_api.Models.Entities.User", b =>
                {
                    b.HasOne("viko_api.Models.Entities.Entity", "Entity")
                        .WithMany("Users")
                        .HasForeignKey("EntityId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Entities");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("viko_api.Models.Entities.Entity", b =>
                {
                    b.Navigation("Administrators");

                    b.Navigation("Events");

                    b.Navigation("Students");

                    b.Navigation("Teachers");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("viko_api.Models.Entities.Event", b =>
                {
                    b.Navigation("EventRegistrations");
                });

            modelBuilder.Entity("viko_api.Models.Entities.EventStatus", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("viko_api.Models.Entities.Student", b =>
                {
                    b.Navigation("EventRegistrations");
                });

            modelBuilder.Entity("viko_api.Models.Entities.Teacher", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("viko_api.Models.Entities.User", b =>
                {
                    b.Navigation("Administrators");

                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });
#pragma warning restore 612, 618
        }
    }
}
