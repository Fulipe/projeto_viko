// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using viko_api.Models;

#nullable disable

namespace viko_api.Migrations
{
    [DbContext(typeof(VikoDbContext))]
    partial class VikoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("viko_api.Models.Entities.Entity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Image")
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR(MAX)");

                    b.Property<string>("Languages")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PK_Entities");

                    b.ToTable("Entities");
                });

            modelBuilder.Entity("viko_api.Models.Entities.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("Entity_Id");

                    b.Property<int>("EventStatusId")
                        .HasColumnType("int")
                        .HasColumnName("Event_Status_Id");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Finish_Date");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("RegistrationDeadline")
                        .HasColumnType("datetime")
                        .HasColumnName("Registration_Deadline");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Start_Date");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint")
                        .HasColumnName("Teacher_Id");

                    b.HasKey("Id")
                        .HasName("PK_Events");

                    b.HasIndex("EntityId");

                    b.HasIndex("EventStatusId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("viko_api.Models.Entities.EventRegistration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PK_EventRegistrations");

                    b.HasIndex("EventId");

                    b.HasIndex("StudentId");

                    b.ToTable("EventRegistrations");
                });

            modelBuilder.Entity("viko_api.Models.Entities.EventStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_EventStatus");

                    b.ToTable("EventStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "Open"
                        },
                        new
                        {
                            Id = 2,
                            Status = "Closed"
                        },
                        new
                        {
                            Id = 3,
                            Status = "Finished"
                        });
                });

            modelBuilder.Entity("viko_api.Models.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_Roles");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Student"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Teacher"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Administrator"
                        });
                });

            modelBuilder.Entity("viko_api.Models.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateOnly>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("Entity_Id");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_Users");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EntityId");

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("viko_api.Models.Entities.Event", b =>
                {
                    b.HasOne("viko_api.Models.Entities.Entity", "Entity")
                        .WithMany("Events")
                        .HasForeignKey("EntityId")
                        .IsRequired()
                        .HasConstraintName("FK_Event_Entity");

                    b.HasOne("viko_api.Models.Entities.EventStatus", "EventStatus")
                        .WithMany("Events")
                        .HasForeignKey("EventStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Event_Status");

                    b.HasOne("viko_api.Models.Entities.User", "Teacher")
                        .WithMany("Events")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK_Event_Teacher");

                    b.Navigation("Entity");

                    b.Navigation("EventStatus");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("viko_api.Models.Entities.EventRegistration", b =>
                {
                    b.HasOne("viko_api.Models.Entities.Event", "Event")
                        .WithMany("EventRegistrations")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_Registration_Event");

                    b.HasOne("viko_api.Models.Entities.User", "Student")
                        .WithMany("EventRegistrations")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_Registration_Student");

                    b.Navigation("Event");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("viko_api.Models.Entities.User", b =>
                {
                    b.HasOne("viko_api.Models.Entities.Entity", "Entity")
                        .WithMany("Users")
                        .HasForeignKey("EntityId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Entities");

                    b.HasOne("viko_api.Models.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("viko_api.Models.Entities.Entity", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("viko_api.Models.Entities.Event", b =>
                {
                    b.Navigation("EventRegistrations");
                });

            modelBuilder.Entity("viko_api.Models.Entities.EventStatus", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("viko_api.Models.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("viko_api.Models.Entities.User", b =>
                {
                    b.Navigation("EventRegistrations");

                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
